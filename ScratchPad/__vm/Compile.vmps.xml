<VisualMicro>
  <Program Name="ScratchPad" Ext=".ino" Location="D:\Arduino\Projects\NanyangVenture\ScratchPad">
    <Compile IsDebugStart="1" IsGdb="0" IsCompiled="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\MX\AppData\Local\Temp\VMBuilds\ScratchPad\mega_atmega2560\Debug" ReCompileIfSourceIsNewer="1" IncludesDebug="0" SketchName="ScratchPad" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 50;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE_SERIALUSB 18;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;VM_DEBUG_AUTO_REPORTING;VM_DEBUG_MEM_CHECK 1;" CompilerErrors="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="mega_atmega2560" Description="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" CoreFolder="D:\Arduino\ide\hardware\arduino\avr\cores\arduino" VariantFullPath="D:\Arduino\ide\hardware\arduino\avr\variants\mega" McuIdePath="D:\Arduino\ide" McuSketchBookPath="D:\Arduino\Projects" name="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" vid.0="0x2341" pid.0="0x0010" vid.1="0x2341" pid.1="0x0042" vid.2="0x2A03" pid.2="0x0010" vid.3="0x2A03" pid.3="0x0042" vid.4="0x2341" pid.4="0x0210" vid.5="0x2341" pid.5="0x0242" upload.tool="avrdude" upload.maximum_data_size="8192" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" build.f_cpu="16000000L" build.core="arduino" build.variant="mega" build.board="AVR_MEGA2560" menu.cpu.atmega2560="ATmega2560 (Mega 2560)" menu.cpu.atmega2560.upload.protocol="wiring" menu.cpu.atmega2560.upload.maximum_size="253952" menu.cpu.atmega2560.upload.speed="115200" menu.cpu.atmega2560.bootloader.high_fuses="0xD8" menu.cpu.atmega2560.bootloader.extended_fuses="0xFD" menu.cpu.atmega2560.bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" menu.cpu.atmega2560.build.mcu="atmega2560" menu.cpu.atmega2560.build.board="AVR_MEGA2560" menu.cpu.atmega1280="ATmega1280" menu.cpu.atmega1280.upload.protocol="arduino" menu.cpu.atmega1280.upload.maximum_size="126976" menu.cpu.atmega1280.upload.speed="57600" menu.cpu.atmega1280.bootloader.high_fuses="0xDA" menu.cpu.atmega1280.bootloader.extended_fuses="0xF5" menu.cpu.atmega1280.bootloader.file="atmega/ATmegaBOOT_168_atmega1280.hex" menu.cpu.atmega1280.build.mcu="atmega1280" menu.cpu.atmega1280.build.board="AVR_MEGA" runtime.ide.path="D:\Arduino\ide" runtime.os="windows" build.system.path="D:\Arduino\ide\hardware\arduino\avr\system" runtime.ide.version="10805" target_package="arduino" target_platform="avr" runtime.hardware.path="D:\Arduino\ide\hardware\arduino" originalid="mega" intellisense.tools.path="{runtime.tools.avr-gcc.path}\" intellisense.include.paths="{intellisense.tools.path}avr\include;{intellisense.tools.path}avr\include\avr;{intellisense.tools.path}lib\gcc\avr\4.8.1\include;{intellisense.tools.path}lib\gcc\avr\4.9.2\include;{intellisense.tools.path}lib\gcc\avr\4.9.3\include;" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}\hardware\arduino\avr\bootloaders\{bootloader.file}&quot;" version="1.6.20" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects" compiler.c.elf.flags="{compiler.warning_flags} -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -flto -MMD" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD -flto" compiler.ar.cmd="avr-gcc-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="-I &quot;{build.path}&quot; -include build_options.h" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.network_cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.verify="" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} &quot;-P{serial.port}&quot; -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.verify="" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" tools.avrdude.upload.network_pattern="&quot;{network_cmd}&quot; -address {serial.port} -port {upload.network.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\pd4xo3tv.r1p\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.extra_params="" arduinoisporg.name="ArduinoISP.org" arduinoisporg.protocol="arduinoisporg" arduinoisporg.program.tool="avrdude" arduinoisporg.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="stk500v1" arduinoasisp.speed="19200" arduinoasisp.program.protocol="stk500v1" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.extra_params="-P{serial.port}" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.extra_params="-P{serial.port}" jtag3isp.name="Atmel JTAGICE3 (ISP mode)" jtag3isp.communication="usb" jtag3isp.protocol="jtag3isp" jtag3isp.program.protocol="jtag3isp" jtag3isp.program.tool="avrdude" jtag3isp.program.extra_params="" jtag3.name="Atmel JTAGICE3 (JTAG mode)" jtag3.communication="usb" jtag3.protocol="jtag3" jtag3.program.protocol="jtag3" jtag3.program.tool="avrdude" jtag3.program.extra_params="-B0.1" atmel_ice.name="Atmel-ICE (AVR)" atmel_ice.communication="usb" atmel_ice.protocol="atmelice_isp" atmel_ice.program.protocol="atmelice_isp" atmel_ice.program.tool="avrdude" atmel_ice.program.extra_params="-Pusb" runtime.tools.avr-gcc.path="D:\Arduino\ide\hardware\tools\avr" runtime.tools.avr-gcc-4.9.2-atmel3.5.4-arduino2.path="D:\Arduino\ide\hardware\tools\avr" runtime.tools.tools-avr.path="D:\Arduino\ide\hardware\tools\avr" runtime.tools.avrdude.path="D:\Arduino\ide\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino9.path="D:\Arduino\ide\hardware\tools\avr" runtime.tools.arduinoOTA.path="D:\Arduino\ide\hardware\tools\avr" runtime.tools.arduinoOTA-1.1.1.path="D:\Arduino\ide\hardware\tools\avr" runtime.tools.arm-none-eabi-gcc.path="D:\Arduino\ide\portable\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path="D:\Arduino\ide\portable\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.bossac.path="D:\Arduino\ide\portable\packages\arduino\tools\bossac\1.6.1-arduino" runtime.tools.bossac-1.6.1-arduino.path="D:\Arduino\ide\portable\packages\arduino\tools\bossac\1.6.1-arduino" upload.protocol="wiring" upload.maximum_size="253952" upload.speed="115200" bootloader.high_fuses="0xD8" bootloader.extended_fuses="0xFD" bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" build.mcu="atmega2560" runtime.vm.boardinfo.id="mega_atmega2560" runtime.vm.boardinfo.name="mega_atmega2560" runtime.vm.boardinfo.desc="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" runtime.vm.boardinfo.src_location="D:\Arduino\ide\hardware\arduino\avr" ide.hint="Use installed IDE. Provides built-in hardware, reference/help and libraries." ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.9.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.recipe.preproc.defines.flags="-w -x c++ -E -dM" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.builder.exe="arduinobuilder.exe" ide.builder.name="Arduino Builder" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.appid="arduino16x" location.sketchbook="D:\Arduino\Projects" build.core.vmresolved="D:\Arduino\ide\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="D:\Arduino\ide\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="D:\Arduino\ide\hardware\arduino\avr" build.core.path="D:\Arduino\ide\hardware\arduino\avr\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="D:\Arduino\ide\hardware\arduino\avr" runtime.platform.path="D:\Arduino\ide\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" vm.runtime.compiler.shared_library_paths="D:\Arduino\Projects\libraries\FreeRTOS;D:\Arduino\Projects\libraries\Adafruit_GFX_Library;D:\Arduino\ide\hardware\arduino\avr\libraries\SPI" builder.noino="false" build.architecture="avr" vmresolved.compiler.path="D:\Arduino\ide\hardware\tools\avr\bin\" vmresolved.tools.path="D:\Arduino\ide\hardware\tools\avr" build.variant.vmresolved.name="mega" build.variant.vmresolved.full_path="D:\Arduino\ide\hardware\arduino\avr\variants\mega" vm.runtime.compiler.cached_cores_path="C:\Users\MX\AppData\Local\Temp\VMBCore\arduino16x" vm.runtime.compiler.showwarnings="false" vm.runtime.compiler.showwarnings_core="false" vm.runtime.compiler.showwarnings_library="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" vm.runtime.compiler.auto_discover_includes="false" serial.port.file="COM5" serial.port="COM5" serial.port.num="5" extra.time.local="1531787633" extra.time.utc="1531758833" extra.time.dst="28800" extra.time.zone="-28800" serial.port.caption="COM5   - USB Serial Device" serial.Caption="USB Serial Device (COM5)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="USB Serial Device" serial.DeviceID="USB\VID_2341&amp;PID_0042\856333432393519031F1" serial.HardwareID.value0="USB\VID_2341&amp;PID_0042" serial.Manufacturer="Microsoft" serial.Name="USB Serial Device (COM5)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_2341&amp;PID_0042\856333432393519031F1" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="DESKTOP-U7JDNCU" serial.vid="0x2341" serial.pid="0x0042" serial.vidpid="23410042" serial.vid_pid="0x2341_0x0042" serial.iserial="856333432393519031F1" serial.port.iserial="856333432393519031F1" build.project_name="ScratchPad.ino" build.project_path="D:\Arduino\Projects\NanyangVenture\ScratchPad" sketch_path="D:\Arduino\Projects\NanyangVenture\ScratchPad" ProjectDir="D:\Arduino\Projects\NanyangVenture\ScratchPad\" build.path="C:\Users\MX\AppData\Local\Temp\VMBuilds\ScratchPad\mega_atmega2560\Debug" vm.runtime.compile.skip_library_file_if_exists_in_project="false" vm.runtime.compiler.auto_discover_includes_cache="true" vm.runtime.build.final_output_path="D:\Arduino\Projects\NanyangVenture\Debug\" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\MX\AppData\Local\Temp\VMBuilds\ScratchPad\mega_atmega2560\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" AutoReportFreeMemory="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="9600" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="MotorLogger.cpp, line 21" Id="1071e5b6-ebb4-49a1-9bde-b7f4724c995a" Enabled="1" Message="HALT!" MessageTextType="0" PreProcessedMessage="HALT!" Condition="totalEnergy &gt; 180000000" ConditionType="1" CurrentHits="0" File="d:\arduino\projects\nanyangventure\nv10_back\motorlogger.cpp" FileLine="21" FileColumn="1" FunctionName="logData()" FunctionLineOffset="8" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1071e5b6-ebb4-49a1-9bde-b7f4724c995a'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1" />
      <BreakPoint Index="2" Name="NV10_back.ino, line 132" Id="1fb86da1-3092-454f-89b1-233ac9b1d8d4" Enabled="1" Message="Motor stack: {uxTaskGetStackHighWaterMark(NULL)}" MessageTextType="0" PreProcessedMessage="Motor stack: {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\arduino\projects\nanyangventure\nv10_back\nv10_back.ino" FileLine="132" FileColumn="1" FunctionName="TaskReadFuelCell(void *pvParameters)" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1000" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1fb86da1-3092-454f-89b1-233ac9b1d8d4'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>125		TickType_t delay = pdMS_TO_TICKS(READ_FC_INTERVAL);
126		while (1)
127		{
128			for (int i = 0; i &lt; NUM_FUELCELLS; i++)
129			{
130				(fuelCell + i)-&gt;logData();
131			}
--&gt;132			vTaskDelayUntil(&amp;prevTick, delay); // more accurate compared to vTaskDelay, since the delay is shrunk according to execution time of this piece of code
133		}
134	}
135	void TaskReadMotorPower(void* pvParameters)
136	{
137		// Obtain current sensor object references from parameter passed in
138		AttopilotCurrentSensor* sensor = (AttopilotCurrentSensor*)pvParameters;
139	
140		TickType_t prevTick = xTaskGetTickCount(); // only needed when vTaskDelayUntil is called instead of vTaskDelay
141		TickType_t delay = pdMS_TO_TICKS(READ_MT_INTERVAL);
</Source>
        <MessageVariables>
          <MessageVariable Name="uxTaskGetStackHighWaterMark(NULL)" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="NV10_back.ino, line 148" Id="e70f96dc-6f4d-4aec-9f63-623992ccbfd8" Enabled="1" Message="FuelCell stack: {uxTaskGetStackHighWaterMark(NULL)}" MessageTextType="0" PreProcessedMessage="FuelCell stack: {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\arduino\projects\nanyangventure\nv10_back\nv10_back.ino" FileLine="148" FileColumn="1" FunctionName="TaskReadMotorPower(void* pvParameters)" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1000" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='e70f96dc-6f4d-4aec-9f63-623992ccbfd8'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>141		TickType_t delay = pdMS_TO_TICKS(READ_MT_INTERVAL);
142		while (1)
143		{
144			for (int i = 0; i &lt; NUM_MOTORS; i++)
145			{
146				(sensor + i)-&gt;logData();
147			}
--&gt;148			vTaskDelayUntil(&amp;prevTick, delay);
149		}
150		
151	}
152	void TaskQueueOutputData(void *pvParameters)
153	{
154		const uint16_t fuelcell_logsend = FUELCELL_LOGSEND_INTERVAL / QUEUE_DATA_INTERVAL;
155		const uint16_t motor_logsend = MOTOR_LOGSEND_INTERVAL / QUEUE_DATA_INTERVAL;
156		const uint16_t hud_refresh = HUD_REFRESH_INTERVAL / QUEUE_DATA_INTERVAL;
157		const uint16_t back_lcd_refresh = BACK_LCD_REFRESH_INTERVAL / QUEUE_DATA_INTERVAL;
</Source>
        <MessageVariables>
          <MessageVariable Name="uxTaskGetStackHighWaterMark(NULL)" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="NV10_back.ino, line 241" Id="2180740e-5215-473c-aed6-4148327c6044" Enabled="1" Message="QueueTask stack: {uxTaskGetStackHighWaterMark(NULL)}" MessageTextType="0" PreProcessedMessage="QueueTask stack: {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\arduino\projects\nanyangventure\nv10_back\nv10_back.ino" FileLine="241" FileColumn="1" FunctionName="TaskQueueOutputData(void *pvParameters)" FunctionLineOffset="89" FunctionColumnOffset="1" HitCountTarget="1000" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='7fafd4b8-6ed8-4ab3-8e45-44c0f8128940'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>234					{
235						strcat(outgoing.data, "\t");
236						motors[i].dumpTotalEnergyInto(outgoing.data);//len 7
237					}
238					xQueueSend(queueForDisplay, &amp;outgoing, 100);
239				}
240			}
--&gt;241			vTaskDelay(delay);
242		}
243	}
244	
245	void TaskLogSendData(void *pvParameters __attribute__((unused)))  // This is a Task.
246	{
247		QueueItem received;
248		TickType_t delay = pdMS_TO_TICKS(LOGSEND_INTERVAL); // delay 300 ms, shorter than reading/queueing tasks since this task has lower priority
249		
250		while(1)
</Source>
        <MessageVariables>
          <MessageVariable Name="uxTaskGetStackHighWaterMark(NULL)" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="NV10_back.ino, line 283" Id="30b9a814-a927-4c7c-b052-462fac65569a" Enabled="1" Message="LogSend stack: {uxTaskGetStackHighWaterMark(NULL)}" MessageTextType="0" PreProcessedMessage="LogSend stack: {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\arduino\projects\nanyangventure\nv10_back\nv10_back.ino" FileLine="283" FileColumn="1" FunctionName="TaskLogSendData(void *pvParameters __attribute__((unused)))" FunctionLineOffset="38" FunctionColumnOffset="1" HitCountTarget="1000" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='6b2bf175-2f30-4a18-86cf-d6e5f3fbca3b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>276					writtenFile.close();
277					taskEXIT_CRITICAL();
278				}
279				// *path should only remain as /LOG_****/. Clean up after use
280				strcpy(path + FILENAME_HEADER_LENGTH, "");
281			}
282	
--&gt;283			vTaskDelay(delay);  // poll more frequently since more data comes in at a time
284		}
285	}
286	void TaskDisplayData(void *pvParameters)
287	{
288		QueueItem received;
289		LiquidCrystal_I2C lcdScreen = LiquidCrystal_I2C(LCD1_I2C_ADDR, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);
290		DisplayLCD lcdManager = DisplayLCD(lcdScreen);
291	
292		TickType_t delay = pdMS_TO_TICKS(DISPLAY_INTERVAL);
</Source>
        <MessageVariables>
          <MessageVariable Name="uxTaskGetStackHighWaterMark(NULL)" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="NV10_back.ino, line 301" Id="b41010a4-3abe-47f1-8039-8cd6c0a064c1" Enabled="1" Message="DisplayData stack: {uxTaskGetStackHighWaterMark(NULL)}" MessageTextType="0" PreProcessedMessage="DisplayData stack: {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\arduino\projects\nanyangventure\nv10_back\nv10_back.ino" FileLine="301" FileColumn="1" FunctionName="TaskDisplayData(void *pvParameters)" FunctionLineOffset="15" FunctionColumnOffset="1" HitCountTarget="1000" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d091e027-9968-4971-8e66-d5d669f2e747'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>294		while (1)
295		{
296			BaseType_t success;
297			while (xQueueReceive(queueForDisplay, &amp;received, 0) == pdPASS)
298			{
299				lcdManager.printData(received);
300			}	
--&gt;301			vTaskDelay(delay);
302		}
303	}
304	void TaskDoNothing(void *pvParameters __attribute__((unused)))  // This is a Task.
305	{
306		uint32_t totalIdleMillis = 0;
307		uint32_t previousMillis = 0;
308		while (1)
309		{
310			totalIdleMillis += millis()-previousMillis;
</Source>
        <MessageVariables>
          <MessageVariable Name="uxTaskGetStackHighWaterMark(NULL)" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="NV10_back.ino, line 312" Id="198e5cdb-7857-42fa-bef5-5b934e99fff7" Enabled="1" Message="Idle millis: {totalIdleMillis} Total millis: {millis()}" MessageTextType="0" PreProcessedMessage="Idle millis: {0} Total millis: {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\arduino\projects\nanyangventure\nv10_back\nv10_back.ino" FileLine="312" FileColumn="1" FunctionName="TaskLogSendData(void *pvParameters __attribute__((unused)))" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="4096" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='198e5cdb-7857-42fa-bef5-5b934e99fff7'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>305	{
306		uint32_t totalIdleMillis = 0;
307		uint32_t previousMillis = 0;
308		while (1)
309		{
310			totalIdleMillis += millis()-previousMillis;
311			previousMillis = millis();
--&gt;312			
313		}
314	}
</Source>
        <MessageVariables>
          <MessageVariable Name="totalIdleMillis" Index="1" />
          <MessageVariable Name="millis()" Index="2" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>